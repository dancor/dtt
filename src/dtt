#!/usr/bin/env python
#
# dynamic typing tutor
#
# currently set up to use 'fortune' program for sentences
# saves typing error stats just in flat file
# heavy focus on no-letter-left-behind: huge typo penalty/annoyance (5s)
#
#
# big picture
#
# we will focus on individual letters and bigrams
# we wouldn't mind some support for trigrams and n-grams beyond
# we will not think too much about difficulty factors beyond that
#
# we will think about accuracy and speed
# we believe that it is better to be accurate and slow first then work on speed
# we are interested in extremely high levels of accuracy (think 100%)
#
# we will think about ways to keep things interesting
# the funny sentences that a random grammar makes should be interesting
# some support for continuous "thought" passages (wordnet) would help too
# and discussions streams (linguistic pragmatics, really) (
#   - rhetorical question and answer
#   - contrasts, parallels, and lists
#   - recurring "characters"
#   - fake essay generators
#   - 5x5 essays, limericks (dirty words!)
#   - wiki articles
#   - fortune
# )

# extreme rules
# - at any time we have a required accuracy and a required wpm
#   - we may also have (higher) goal accuracies and wpms
#   - it would not be unreasonable to make the required accuracy be 100%
# - if you do not attain the requireds, you have to go again and again
# - backspacing is so not allowed: get it right the first time
# - we record mistakes/totals for each {1..n}-gram encountered
#   - only count how we do on _first_time_ trying exercise
#   - n = 3 is probably good

# generate random sentences with
#
# stage 1: non-dynamic generation, start recording data
# - wiki articles or fortune

from optparse import OptionParser
import curses as crs
import os
import re
import simplejson as sjn
import string as stg
import subprocess as spc
import sys
import time

opt_p = OptionParser()
opt_p.add_option('-i', '--inc',
    help='increment number in this file by number of passages completed')
opt_p.add_option('-d', '--desc',
    help='describe the typing-exercise (for the log file only)')
opt_p.add_option('-T', '--typo-delay',
    help='seconds to delay on typo')
(opts, args) = opt_p.parse_args()

class Log:
    def __init__(self, fn):
        self.f = file(fn, 'a')
    def log(self, s):
        print >> self.f, s
    def close(self):
        self.f.close()

def_cmd_fcn = lambda x: 'fortune -e'

def dAppend(d, k, v):
    try:
        d[k].append(v)
    except KeyError:
        d[k] = [v]

#wSToSp = stg.maketrans('\t\n', '  ')
wSToSp = stg.maketrans('\t', ' ')
overTwoSp = re.compile(' {3,}')
initialNonLtr = re.compile('^ *', re.M | re.S)

typo_delay = int(opts.typo_delay) if opts.typo_delay else 6

def gen_typex(cmd_fcn, n):
    '''generate a typing-exercise
    eventually this can be based on various feedback on how you are doing
    or what you feel like practicing'''
    tx = None
    while not tx:
        cmd = cmd_fcn(n)
        p = spc.Popen(cmd, shell=True, stdout=spc.PIPE)
        p.wait()

        tx = [l.strip().replace('\t', ' ') for l in p.stdout.readlines()]
        for tx_l in tx:
            # FIXME: just split lines, and use curses width?
            if len(tx_l) > 80:
                tx = None
            break
        if not tx:
            continue
        tx = '\n'.join(tx)
        tx = re.sub(initialNonLtr, '', tx)
    return (opts.desc if opts.desc else cmd, tx)

def addstrm(scr, x, y, s):
    try:
        # hack to not fatal on screen size bs
        scr.addstr(x, y, s)
    except Exception, e:
        pass

def main(scr, logF, args):
    colGood, colWrong, colDoneGood, colDoneWrong = range(1, 5)
    crs.init_pair(colGood, crs.COLOR_GREEN, crs.COLOR_BLACK)
    crs.init_pair(colWrong, crs.COLOR_WHITE, crs.COLOR_RED)
    crs.init_pair(colDoneGood, crs.COLOR_YELLOW, crs.COLOR_BLACK)
    crs.init_pair(colDoneWrong, crs.COLOR_YELLOW, crs.COLOR_RED)

    sessionTxLen = 0
    sessionTimeDelta = 0

    if args:
        argn = len(args)
        def cmd_fcn(n):
            return 'cat ' + args[n % argn]
    else:
        cmd_fcn = def_cmd_fcn

    n = 0
    while True:
        (desc, tx) = gen_typex(cmd_fcn, n)
        if not tx:
            print >> sys.stderr, 'typing-exercise generation failed?'
            break
        n += 1
        txLen = len(tx)

        lineNum = tx.count('\n') + 2
        addstrm(scr, 0, 0, tx)
        scr.move(0, 0)
        scr.refresh()
        txTime = time.time()

        x = 0
        y = 0
        pos = 0
        cWrong = {}

        attrGood = crs.color_pair(colGood)
        attrWrong = crs.color_pair(colWrong) | crs.A_BOLD
        attrDoneGood = crs.color_pair(colDoneGood)
        attrDoneWrong = crs.color_pair(colDoneWrong)

        while pos < txLen:
            c = scr.getch()
            if c == 12:
                continue
            cGoodCh = tx[pos]
            cGood = ord(cGoodCh)
            if c == cGood:
                correct = True
                attr = attrGood
                attrDone = attrDoneGood
            else:
                correct = False
                attr = attrWrong
                attrDone = attrDoneWrong
                dAppend(cWrong, pos, chr(c))
                if c < 32 or c >= 210:
                    c = ord(' ')
            try:
                # past end of screen errors
                scr.addch(y + lineNum, x, c, attr)
            except:
                pass
            scr.addch(y, x, cGood, attrDone)
            if correct:
                pos += 1
                if cGood == 10:
                    y += 1
                    x = 0
                else:
                    x += 1
            else:
                crs.flash()
                for i in range(typo_delay, 0, -1):
                    addstrm(scr, lineNum - 1, 0, str(i))
                    scr.refresh()
                    time.sleep(1)
                crs.flushinp()
                addstrm(scr, lineNum - 1, 0, ' ')
                scr.addch(y, x, cGood, attrDone)
                scr.refresh()
                crs.flash()

        txLen = len(tx)
        timeDelta = time.time() - txTime
        cpm = txLen / timeDelta * 60
        wpm = cpm / 5
        sessionTxLen += txLen
        sessionTimeDelta += timeDelta
        sessionCpm = sessionTxLen / sessionTimeDelta * 60
        sessionWpm = sessionCpm / 5
        addstrm(scr, y + lineNum + 1, 0, 'wpm %2.2f' % wpm)
        summary = (n, txLen, sessionWpm)
        addstrm(scr, y + lineNum + 2, 0, summary)
        addstrm(scr, y + lineNum + 3, 0, 'press q to quit or c to continue')
        partyOver = False
        while True:
            c = scr.getch()
            if c == ord('q'):
                partyOver = True
                break
            elif c == ord('c'):
                break
        def log_label(label, x):
            logF.log(label + ': ' + sjn.dumps(x))
        logF.log('typing-exercise completed at %s:' % sjn.dumps(time.time()))
        log_label('desc', desc)
        log_label('n', n)
        log_label('typo_delay', typo_delay)
        log_label('wpm', wpm)
        log_label('text', tx)
        log_label('wrong', cWrong)
        if partyOver:
            break
        scr.clear()
    return summary

if __name__ == '__main__':
    logF = Log(os.path.join(os.getenv('HOME'), '.dtt', 'log'))
    (n, txLen, sessionWpm) = crs.wrapper(main, logF, args)
    if opts.inc:
        f = file(opts.inc)
        i = int(f.readline())
        f.close()
        f = file(opts.inc, 'w')
        print >> f, i + n
        f.close()
    logF.close()
    print 'passages %d, chars %d, wpm %2.2f' % (n, txLen, sessionWpm)
